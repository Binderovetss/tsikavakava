import os
import requests
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# üìå –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π API URL (Render)
API_URL = "https://text-corrector-wubj.onrender.com"  # üîπ –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É —Å Render!

# üìå –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram Bot Token
BOT_TOKEN = "7368319072:AAGRGJU9NqchsjSMGHdVSrKGZEXYfyyRiUE"

# üìå –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
DB_FILE = "knowledge_base.db"

# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
def create_database():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS knowledge (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT NOT NULL,
            photo TEXT
        )
    ''')
    conn.commit()
    conn.close()

# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
def save_to_db(text, photo_path=None):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO knowledge (text, photo) VALUES (?, ?)", (text, photo_path))
    conn.commit()
    conn.close()

# üìå –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="add_info")],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="search_info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "add_info":
        context.user_data["waiting_for_info"] = True
        await query.message.reply_text("üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ).")
    
    elif query.data == "search_info":
        context.user_data["waiting_for_search"] = True
        await query.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "waiting_for_info" in context.user_data and context.user_data["waiting_for_info"]:
        text = update.message.text

        # üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ API –Ω–∞ Render
        response = requests.post(API_URL, json={"text": text})
        if response.status_code == 200:
            corrected_text = response.json().get("corrected_text", text)
        else:
            corrected_text = text

        # üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±–∞–∑—É
        save_to_db(corrected_text)
        await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:\n\n{corrected_text}")

        # üìå –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        context.user_data["waiting_for_info"] = False

    elif "waiting_for_search" in context.user_data and context.user_data["waiting_for_search"]:
        keyword = update.message.text
        results = search_in_db(keyword)

        if results:
            await update.message.reply_text("üîç –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
            for text, photo in results:
                if photo:
                    await update.message.reply_photo(photo=open(photo, "rb"), caption=text)
                else:
                    await update.message.reply_text(text)
        else:
            await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        context.user_data["waiting_for_search"] = False

# üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def search_in_db(keyword):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT text, photo FROM knowledge WHERE text LIKE ?", ('%' + keyword + '%',))
    results = cursor.fetchall()
    conn.close()
    return results

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ (–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Ñ–æ—Ç–æ)
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "waiting_for_info" in context.user_data and context.user_data["waiting_for_info"]:
        if update.message.caption:
            text = update.message.caption

            # üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            response = requests.post(API_URL, json={"text": text})
            if response.status_code == 200:
                corrected_text = response.json().get("corrected_text", text)
            else:
                corrected_text = text

            # üìå –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            photo_file = await update.message.photo[-1].get_file()

            # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            photo_path = f"photos/{photo_file.file_id}.jpg"
            
            # üìå –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await photo_file.download(destination_file=photo_path)

            # üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ –≤ –±–∞–∑—É
            save_to_db(corrected_text, photo_path)
            await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n{corrected_text}")

        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ!")

        context.user_data["waiting_for_info"] = False

# üìå –ù–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # üìå –ö–æ–º–∞–Ω–¥–∞ /start
    app.add_handler(CommandHandler("start", start))

    # üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CallbackQueryHandler(button_handler))

    # üìå –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

# üìå –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
if __name__ == "__main__":
    create_database()
    main()
